1) s = "Humpty Dumpty sat on a wall"

public String reverseStringByWords(String s) {
     String[] words = s.split(" ");
     StringBuilder result = new StringBuilder();
     for(int i = words.length - 1; i >= 0; i--) {
           result.append(words[i]);
           if(i != 0) result.append(" ");
     }
     return result.toString();
}

2) arr = [1, 0, 0, 1, 1, 0]
         [0, 0, 0, 1, 0, 1, 0, 1, 0]

public void sortArrayInPlace(int[] arr) {
     int zeroIndex = 0;
     int i = 0;
     int n = arr.length;
     while (i < n) {
         if (arr[i] == 0) {
            if(i == zeroIndex) zeroIndex++;
            else {
               arr[zeroIndex++] = 0;
               arr[i] = 1;
            }
         }
         i++;
    }
}

[1, 0, 0, 1, 1, 0]
i = 0
zero = 0

i = 1
zero = 0
[0, 1, 0, 1, 1, 0]
zero = 1
i = 2

[0, 0, 1, 1, 1, 0]

[1, 1, 1, 1, 0]
zero = 0
[0, 1, 1, 1, 1]
zero = 1


3) class PrintAlpha {
   
    int c;

    public PrintAlpha() {
        this.c = 0;
    }

    public synchronized int printAndIncrementAlpha(int currThread) {
         if(c >= 26) return 1;
         if(c % 2 == currThread) {
            System.out.println((char)('a' + c));
            c++;
         }
         return 0;
    }

}


public static void main(String[] args) {

    PrintAlpha obj = new PrintAlpha();
    Thread t1 = new Thread(() => {
          while(obj.printAndIncrementAlpha(0) != 1);
    }
    );
      Thread t2 = new Thread(() => {
          while(obj.printAndIncrementAlpha(1) != 1);
    }
   );
    t1.start();
    t2.start();
    
}

4) arr = [1, 4, 5, 3, 6, 7]

int squareSum = Arrays.stream(arr)
                      .filter(x -> x % 2 != 0)
                      .map(oddNum -> oddNum * oddNum) // mapToInt()
		      .sum();
                      // .reduce((a, b) -> a + b);

class Country {
   int id;
   String name;


  @Override
  public boolean equals(Object o2)
  { 
    if(
    { 
       Country c2 = (Country) o2;
       return this.id == o2.getId() && this.name.equals(o2.getName());
    }
  }
  
}


5) List<Country> countries = new ArrayList<>();

countries.add(new Country(1, "India"));
countries.add(new Country(2, "China"));
// ...

Map<Integer, String> countryMap = countries.stream()
                                           .collect(Collectors.toMap(a -> a::getId, a -> a::getName, (v1, v2) -> v1, TreeMap));



Map<Country, Integer> map = new HashMap<>();
Country c1 = new Country(1, "India");
Country c2 = new Country(1, "India");

map.put(c1, 1000);
map.put(c2, 2000);


6) Table 
request (request_id, request_status(completed, in-progress, failed))

select count(*), request_status
from request
group by request_status;



@PostMapping(value = "/product")
public ResponseEntity<CountryResponseDto> addCountry(@RequestBody Country country) {
      
      return ResponseEntity.ok().body(countryService.addCountry(country));

}

7) What is Microservices and why we need it?
8) If we have 2 microservices A & B, the inter-communication between them i.e. the response is slow sometimes. How do you approach this?
9) Hashcode() vs equals() method and which is used in HashMap?



















